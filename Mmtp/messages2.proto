syntax = "proto2";

message MmtpMessage {
	required MsgType msgType = 1;
	required string uuid = 2;
	oneof body {
	      ProtocolMessage protocolMessage = 4;
	      ResponseMessage responseMessage = 5;
	}
}


enum MsgType {
     UNSPECIFIED_MESSAGE = 0;
     PROTOCOL_MESSAGE = 1;
     REDPONSE_MESSAGE = 2;
}

enum ProtocolMessageType {
     UNSPECIFIED = 0;
     SUBSCRIBE_MESSAGE = 1;
     UNSUBCRIBE_MESSAGE = 2;
     SEND_MESSAGE = 3;
     RECIEVE_MESSAGE = 4;
     FETCH_MESSAGE = 5;
     DISCONNECT_MESSAGE = 6;
     CONNECT_MESSAGE = 7;
}

message ResponseMessage {
	required string responseToUuid = 1;
	required ResponseEnum response = 2;
	optional string reasonText = 3;
	repeated MessageMetadata messageMetadata = 4;
	repeated ApplicationMessage applicationMessage = 5;
	optional string reconnectToken = 6;
}

message MessageMetadata {
	required string uuid = 1;
	required ApplicationMessageHeader header = 2;
}

enum ResponseEnum {
     UNSPECIFIED_RESPONSE = 0;
     GOOD = 1;
     ERROR = 2;
}

message ApplicationMessage {
	required ApplicationMessageHeader header = 1;
	required bytes body = 2;
	required string signature = 3;
}

message Recipients {
	repeated string recipients = 1;
}

message ApplicationMessageHeader {
	oneof SubjectOrRecipient{
	      string subject = 1;
	      Recipients recipients = 2;
	}
	required int64 expires = 3;
	required string sender = 4;
	optional string qosProfile = 5;
	required uint32 bodySizeNumBytes = 6;
}

message ProtocolMessage {
	required ProtocolMessageType protocolMsgType = 1;
	oneof body {
	      Subscribe subscribeMessage = 2;
	      Unsubscribe unsubscribeMessage = 3;
	      Send sendMessage = 4;
	      Receive receiveMessage = 5;
	      Fetch fetchMessage = 6;
	      Disconnect disconnectMessage = 7;
	      Connect connectMessage = 8;
	}
}

message Subscribe {
	oneof subjectOrDirectMessages {
	      string subject = 1;
	      bool directMessages = 2;
	}
}

message Unsubscribe {
	oneof subjectOrDirectMessages {
	      string subject = 1;
	      bool directMessages = 2;
	}
}

message Send {
	required ApplicationMessage applicationMessage = 1;
}

message Receive {
	optional Filter filter = 1;
}

message Filter {
	repeated string messageUuids = 1;
}

message Fetch {}

message Disconnect {}

message Connect {
	optional string ownMrn = 1;
	optional string reconnectToken = 2;
}